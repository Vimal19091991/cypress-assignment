/// <reference types="node" />
import * as stream from "stream";
export declare enum Region {
    USWest1 = "us-west-1",
    EUCentral1 = "eu-central-1",
    Staging = "staging"
}
export interface Options {
    region: Region;
    username: string;
    accessKey: string;
    headers?: Record<string, string | number | boolean>;
}
export interface CreateReportRequest {
    name: string;
    browserName?: string;
    browserVersion?: string;
    platformName: string;
    framework: string;
    frameworkVersion: string;
    passed: boolean;
    startTime: string;
    endTime: string;
    build?: string;
    tags?: string[];
}
export interface Asset {
    filename: string;
    data: stream.Readable;
}
export interface UploadAssetResponse {
    uploaded: string[];
    errors?: string[];
}
export declare class TestComposer {
    private readonly opts;
    private readonly requestConfig;
    private readonly url;
    constructor(opts: Options);
    /**
     * Create a report in form of a job on Sauce Labs.
     * @param req Job metadata.
     */
    createReport(req: CreateReportRequest): Promise<{
        id: string;
        url: string;
    }>;
    /**
     * Upload assets.
     * @param jobId The job ID the assets should be attached to.
     * @param assets The assets to upload.
     */
    uploadAssets(jobId: string, assets: Asset[]): Promise<UploadAssetResponse>;
}
//# sourceMappingURL=index.d.ts.map