"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestRuns = void 0;
const util = __importStar(require("util"));
const axios_1 = __importStar(require("axios"));
const debug_1 = __importDefault(require("./debug"));
const debug = (0, debug_1.default)('api');
const apiURLMap = new Map([
    ['us-west-1', 'https://api.us-west-1.saucelabs.com'],
    ['eu-central-1', 'https://api.eu-central-1.saucelabs.com'],
    ['staging', 'https://api.staging.saucelabs.net']
]);
class TestRuns {
    constructor(opts) {
        this.api = axios_1.default.create({
            auth: {
                username: opts.username,
                password: opts.accessKey,
            },
            baseURL: apiURLMap.get(opts.region),
        });
    }
    async create(testRuns) {
        try {
            debug('Submitting test run to test-runs api', testRuns);
            await this.api.post('/test-runs/v1/', {
                test_runs: testRuns,
            });
        }
        catch (e) {
            if ((0, axios_1.isAxiosError)(e)) {
                let data;
                switch (e.response?.status) {
                    case 422:
                        data = e.response?.data;
                        debug('Failed to report test run data', util.inspect(data, { depth: null }));
                        break;
                    default:
                        debug('Unexpected http error while reporting test run data: %s', e.message);
                }
            }
            else {
                debug('Unexpected error while reporting test run data', e);
            }
        }
    }
}
exports.TestRuns = TestRuns;
