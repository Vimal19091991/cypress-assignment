export declare type Region = 'us-west-1' | 'eu-central-1' | 'staging';
interface CI {
    ref_name?: string;
    commit_sha?: string;
    repository?: string;
    branch?: string;
}
interface SauceJob {
    id?: string;
    name?: string;
}
export interface TestRunError {
    message?: string;
    path?: string;
    line?: number;
}
declare type ISODate = string;
export interface TestRunRequestBody {
    name: string;
    start_time: ISODate;
    end_time: ISODate;
    duration: number;
    user_id?: string;
    team_id?: string;
    group_id?: string;
    author_id?: string;
    path_name?: string;
    build_id?: string;
    build_name?: string;
    creation_time?: ISODate;
    browser?: string;
    os?: string;
    app_name?: string;
    status?: 'passed' | 'failed' | 'skipped';
    platform?: 'vdc' | 'rdc' | 'api' | 'other';
    type?: 'web' | 'mobile' | 'api' | 'other';
    framework?: string;
    ci?: CI;
    sauce_job?: SauceJob;
    errors?: TestRunError[];
    tags?: string[];
}
export declare class TestRuns {
    private api;
    constructor(opts: {
        username: string;
        accessKey: string;
        region: Region;
    });
    create(testRuns: TestRunRequestBody[]): Promise<void>;
}
export {};
//# sourceMappingURL=api.d.ts.map