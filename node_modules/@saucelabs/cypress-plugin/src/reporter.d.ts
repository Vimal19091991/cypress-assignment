import { TestRun } from "@saucelabs/sauce-json-reporter";
import BeforeRunDetails = Cypress.BeforeRunDetails;
import ScreenshotInformation = CypressCommandLine.ScreenshotInformation;
import TestResult = CypressCommandLine.TestResult;
import { Options } from "./index";
export interface RunResult extends CypressCommandLine.RunResult {
    screenshots: ScreenshotInformation[];
}
export interface TestError extends CypressCommandLine.TestError {
    codeFrame?: {
        line: number;
        column: number;
        frame: string;
        originalFile?: string;
    };
}
export interface AttemptResult extends CypressCommandLine.AttemptResult {
    wallClockStartedAt: string;
    wallClockDuration: number;
}
export default class Reporter {
    cypressDetails: BeforeRunDetails | undefined;
    private opts;
    private readonly videoStartTime;
    private testComposer;
    private testRunsApi;
    constructor(cypressDetails: BeforeRunDetails | undefined, opts?: Options);
    reportSpec(result: RunResult): Promise<{
        id: string;
        url: string;
    }>;
    reportTestRun(result: RunResult, jobId: string): Promise<void>;
    uploadAssets(jobId: string | undefined, video: string | null, consoleLogContent: string, screenshots: string[], testReport: TestRun): Promise<void>;
    getConsoleLog(result: RunResult): string;
    orderContexts(tests: TestResult[]): {
        name: string;
        values: never[];
        children: {};
    };
    placeInContext(arch: any, title: string[], test: TestResult): any;
    formatResults(node: any, level?: number): string;
    getOsName(osName: string | undefined): string;
    createSauceTestReport(results: any): Promise<TestRun>;
}
//# sourceMappingURL=reporter.d.ts.map