"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.statusOf = exports.TestCode = exports.Test = exports.Suite = exports.TestRun = exports.Status = void 0;
var fs = __importStar(require("fs"));
var Status;
(function (Status) {
    Status["Passed"] = "passed";
    Status["Skipped"] = "skipped";
    Status["Failed"] = "failed";
})(Status = exports.Status || (exports.Status = {}));
/**
 * TestRun represents the entire test run.
 */
var TestRun = /** @class */ (function () {
    function TestRun() {
        this.status = Status.Skipped;
        this.attachments = new Array();
        this.suites = new Array();
        this.metadata = {};
    }
    TestRun.prototype.attach = function (attachment) {
        this.attachments.push(attachment);
    };
    TestRun.prototype.addSuite = function (suite) {
        this.suites.push(suite);
    };
    TestRun.prototype.computeStatus = function () {
        var _this = this;
        this.suites.forEach(function (suite) {
            suite.computeStatus();
            _this.status = statusOf(_this, suite);
        });
        return this.status;
    };
    TestRun.prototype.withSuite = function (name) {
        var suite = this.suites.find(function (suite) { return suite.name === name; });
        if (!suite) {
            suite = new Suite(name);
            this.addSuite(suite);
        }
        return suite;
    };
    TestRun.prototype.stringify = function (computeStatus) {
        if (computeStatus === void 0) { computeStatus = true; }
        if (computeStatus) {
            this.computeStatus();
        }
        return JSON.stringify(this, null, 2);
    };
    TestRun.prototype.toFile = function (filepath, computeStatus) {
        if (computeStatus === void 0) { computeStatus = true; }
        if (computeStatus) {
            this.computeStatus();
        }
        fs.writeFileSync(filepath, this.stringify());
    };
    return TestRun;
}());
exports.TestRun = TestRun;
/**
 * Suite represents a group of tests. It may be nested as part of another suite.
 */
var Suite = /** @class */ (function () {
    function Suite(name) {
        this.name = name;
        this.status = Status.Skipped;
        this.metadata = {};
        this.suites = new Array();
        this.attachments = new Array();
        this.tests = new Array();
    }
    Suite.prototype.attach = function (attachment) {
        this.attachments.push(attachment);
    };
    Suite.prototype.addSuite = function (suite) {
        this.suites.push(suite);
    };
    Suite.prototype.addTest = function (test) {
        this.tests.push(test);
    };
    Suite.prototype.computeStatus = function () {
        var _this = this;
        this.suites.forEach(function (suite) {
            suite.computeStatus();
            _this.status = statusOf(_this, suite);
        });
        this.tests.forEach(function (test) {
            _this.status = statusOf(_this, test);
        });
        return this.status;
    };
    Suite.prototype.withSuite = function (name) {
        var suite = this.suites.find(function (suite) { return suite.name === name; });
        if (!suite) {
            suite = new Suite(name);
            this.addSuite(suite);
        }
        return suite;
    };
    Suite.prototype.withTest = function (name, options) {
        if (options === void 0) { options = {}; }
        var test = new Test(name, options.status, options.duration, options.output, options.startTime, options.attachments, options.metadata, options.code, options.videoTimestamp);
        this.addTest(test);
        return test;
    };
    return Suite;
}());
exports.Suite = Suite;
/**
 * Test represents a single, individual test.
 */
var Test = /** @class */ (function () {
    function Test(name, status, duration, output, startTime, attachments, metadata, code, videoTimestamp) {
        if (status === void 0) { status = Status.Skipped; }
        if (duration === void 0) { duration = 0; }
        if (startTime === void 0) { startTime = new Date(); }
        if (attachments === void 0) { attachments = new Array(); }
        if (metadata === void 0) { metadata = {}; }
        this.name = name;
        this.status = status;
        this.startTime = startTime;
        this.duration = duration;
        this.metadata = metadata;
        this.output = output;
        this.attachments = attachments;
        this.code = code;
        this.videoTimestamp = videoTimestamp;
    }
    Test.prototype.attach = function (attachment) {
        var _a;
        (_a = this.attachments) === null || _a === void 0 ? void 0 : _a.push(attachment);
    };
    return Test;
}());
exports.Test = Test;
/**
 * TestCode represents the code associated to a test.
 */
var TestCode = /** @class */ (function () {
    function TestCode(lines) {
        this.lines = lines;
    }
    return TestCode;
}());
exports.TestCode = TestCode;
/**
 * Determines the final status of the parent based on the child's status.
 *
 * Possible status transitions:
 *   - skipped -> passed/failed/skipped
 *   - passed -> failed
 *   - failed -> failed
 *
 * @param parent the parent to update
 * @param child the child to update the parent with
 */
function statusOf(parent, child) {
    if (parent.status === Status.Skipped) {
        return child.status;
    }
    else if (child.status === Status.Failed) {
        return Status.Failed;
    }
    return parent.status;
}
exports.statusOf = statusOf;
//# sourceMappingURL=index.js.map