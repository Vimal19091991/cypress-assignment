declare type HasKeyOf<T> = {
    [P in keyof T]?: T[P];
};
export declare enum Status {
    Passed = "passed",
    Skipped = "skipped",
    Failed = "failed"
}
export interface Stateful {
    status: Status;
}
export interface Attachment {
    name: string;
    path: string;
    contentType: string;
}
/**
 * TestRun represents the entire test run.
 */
export declare class TestRun {
    status: Status;
    attachments: Attachment[];
    suites: Suite[];
    metadata: object;
    constructor();
    attach(attachment: Attachment): void;
    addSuite(suite: Suite): void;
    computeStatus(): Status;
    withSuite(name: string): Suite;
    stringify(computeStatus?: boolean): string;
    toFile(filepath: string, computeStatus?: boolean): void;
}
/**
 * Suite represents a group of tests. It may be nested as part of another suite.
 */
export declare class Suite {
    name: string;
    status: Status;
    metadata: object;
    suites: Suite[];
    attachments: Attachment[];
    tests: Test[];
    constructor(name: string);
    attach(attachment: Attachment): void;
    addSuite(suite: Suite): void;
    addTest(test: Test): void;
    computeStatus(): Status;
    withSuite(name: string): Suite;
    withTest(name: string, options?: HasKeyOf<Test>): Test;
}
/**
 * Test represents a single, individual test.
 */
export declare class Test {
    name: string;
    status: Status;
    duration: number;
    output?: string;
    startTime: Date;
    attachments?: Attachment[];
    metadata: object;
    code?: TestCode;
    videoTimestamp?: number;
    constructor(name: string, status?: Status, duration?: number, output?: string, startTime?: Date, attachments?: Attachment[], metadata?: object, code?: TestCode, videoTimestamp?: number);
    attach(attachment: Attachment): void;
}
/**
 * TestCode represents the code associated to a test.
 */
export declare class TestCode {
    lines: string[];
    constructor(lines: string[]);
}
/**
 * Determines the final status of the parent based on the child's status.
 *
 * Possible status transitions:
 *   - skipped -> passed/failed/skipped
 *   - passed -> failed
 *   - failed -> failed
 *
 * @param parent the parent to update
 * @param child the child to update the parent with
 */
export declare function statusOf(parent: Stateful, child: Stateful): Status;
export {};
